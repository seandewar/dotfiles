################################################################################
#  Sean Dewar's C++ snippets <https://github.com/seandewar>                    #
################################################################################
extends c
priority 2

snippet #inl "#include local file"
#include "${1:`!p snip.rv = snip.basename + '.hpp'`}"
endsnippet

snippet fore "range-based for (each) loop"
for (${1:const auto&} ${2:x} : ${3:container}) {
	${0:${VISUAL}}
}
endsnippet

snippet forit "iterator-based for loop"
for (auto ${1:it} = std::${2:c}begin(${3:container}); $1 != std::$2end($3); ++$1) {
	${0:${VISUAL}}
}
endsnippet

snippet try "try-catch block"
try {
	${1:${VISUAL}}
} catch (${2}) {
	${0}
}
endsnippet

snippet cat "catch block"
catch (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet ns "namespace"
namespace ${1:My_namespace} {

${0:${VISUAL}}

} // namespace $1
endsnippet

snippet cl "class (rule of zero)"
class ${1:My_class} ${2}{
public:
	$1();

private:
	${0:${VISUAL}}
};
endsnippet

snippet cl5 "class (rule of five)"
class ${1:My_class} ${2}{
public:
	$1();
	$1(const $1&);
	$1($1&&);
	virtual ~$1();

	$1& operator=(const $1&);
	$1& operator=($1&&);

private:
	${0:${VISUAL}}
};
endsnippet

snippet st "struct"
struct ${1:My_struct} ${2}{
	${0:${VISUAL}}
};
endsnippet

snippet fn "function definition"
${1:void} ${2:my_function}(${3})${4}
{
	${0:${VISUAL}}
}
endsnippet

snippet fnd "function declaration (prototype)"
${1:void} ${2:my_function}(${3})${4};
endsnippet

snippet us "using type alias"
using ${1:My_type} = ${2:${VISUAL:T}};
endsnippet

snippet tp "template"
template<${1:typename} ${2:T}${3}>
endsnippet

snippet encl "enum class"
enum class ${1:My_enum_class} {
	${0:${VISUAL}}
};
endsnippet
