""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Sean Dewar's Vim/Neovim Configuration <https://github.com/seandewar>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" determine a runtime directory to store user data.
" an alternative is using fnamemodify(expand('$MYVIMRC', ':p:h')), but if the
" vimrc file is in the home directory, we'll end up cluttering it...
function! GetUserDir()
    if has('nvim')
        if has('win32')
            return expand('~/AppData/Local/nvim')
        else
            return expand('~/.config/nvim')
        endif
    else
        if has('win32')
            return expand('~/vimfiles')
        else
            return expand('~/.vim')
        endif
    endif
endfunction
let $VIMUSERDIR = GetUserDir()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Plugin Configurations (using Plug)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" run :PlugInstall to install new plugins
call plug#begin($VIMUSERDIR . '/plugged')

" utilities
Plug 'SirVer/ultisnips' " snippets engine
Plug 'derekwyatt/vim-fswitch' " switch between companion files (.h, .c/.cc etc.)
Plug 'easymotion/vim-easymotion' " easier motions using <leader><leader>
Plug 'godlygeek/tabular' " text alignment
Plug 'lifepillar/vim-mucomplete'
Plug 'mhinz/vim-startify' " start screen
Plug 'plasticboy/vim-markdown'
Plug 'sheerun/vim-polyglot' " language support package
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch' " asynchronous jobs using :Dispatch
Plug 'tpope/vim-fugitive' " git integration
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar' " enhancements for the netrw directory viewer
Plug 'vim-utils/vim-troll-stopper' " highlight troll unicode (e.g. the greek ;)
Plug 'w0rp/ale' " vim8/nvim async linting engine + lsp support

" appearance
Plug 'itchyny/lightline.vim' | Plug 'maximbaz/lightline-ale'
Plug 'gruvbox-community/gruvbox' " colour scheme

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Vim Behaviour
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" don't crowd working directories with swap files.
" we'll use the same path regardless of nvim/vim so both programs are able to
" detect the same swap files
if !isdirectory(expand('~/.vim/swap'))
    call mkdir(expand('~/.vim/swap'), 'p')
endif
set directory^=~/.vim/swap//

" set character encoding
set encoding=utf8 fileencoding=utf8 termencoding=utf8

" save local window and buffer options and mappings with session data
set sessionoptions+=localoptions

" disable unsafe commands in local vimrc files
set secure

" don't unload modified buffers that are not displayed within a window
set hidden

" open splits on the bottom/right instead of top/left
set splitbelow splitright

" always show at least 1 line above or below the cursor
set scrolloff=1

" don't hide cursor when typing, right-click displays context menu
" ('mouse' is not set, so mouse support is disabled by default for terminals)
set nomousehide mousemodel=popup

" search options
set hlsearch incsearch ignorecase smartcase

" completion matches for commands (after pressing <tab> or ^D for a list &
" <tab><tab> for the wildmenu)
set wildmenu wildmode=list:longest,full wildignorecase

" always display the status and tab lines
set laststatus=2 showtabline=2

" disable bell noises
set belloff=all

" display open file name in terminal title bar
set title

" set tab sizes - treat tabs as 8 spaces (as they typically are), insert 4
" spaces when we use tabs or an auto indent
set tabstop=8 softtabstop=4 shiftwidth=4 autoindent expandtab
" don't indent switch case statements, class access specifiers & namespace
" blocks
set cinoptions+=:0,g0,N-s

" wrap text at 80 cols when formatting (gq), don't auto do it in insert mode
" (polygot plugins may override settings like this to suit the enforced
" standard styles for such languages - e.g rust uses a 100 col limit instead)
set textwidth=79 formatoptions-=t

" backspace settings
set backspace=indent,eol,start

" ensure file type and file indent detection is on
filetype plugin indent on

" spellchecking language en_GB and off by default
set spelllang=en_gb

" configure completion menu
set completeopt=menuone,preview,noinsert

" close completion preview after finishing completion
augroup AutoCloseCompletionPreview
    autocmd!
    autocmd CompleteDone * pclose
augroup END

" wait longer for key timeouts and don't wait for extra key combinations after
" Esc
set timeoutlen=1500 noesckeys

" disable automatic folding of headers etc. in vim-markdown
let g:vim_markdown_folding_disabled = 1

" startify bookmarks
let g:startify_bookmarks = []
if exists('$MYVIMRC')
    let g:startify_bookmarks += [ { 'V': $MYVIMRC } ]
endif

" configure ultisnips - I like to store my snippets globally
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsSnippetsDir = $VIMUSERDIR . '/MyUltiSnips'
let g:UltiSnipsSnippetDirectories = [ g:UltiSnipsSnippetsDir ]

" ale fixing and linting preferences
let g:ale_fixers = {
            \ 'markdown': [ 'remove_trailing_lines' ],
            \ 'cpp': [ 'clang-format', 'remove_trailing_lines', 'trim_whitespace' ],
            \ 'rust': [ 'rustfmt', 'remove_trailing_lines', 'trim_whitespace' ],
            \ '*': [ 'remove_trailing_lines', 'trim_whitespace' ]
            \ }
let g:ale_c_clangformat_options = '-fallback-style=none'
let g:ale_linters = { 'cpp': [ ], 'c': [ ] } " my preference changes daily
let g:ale_fix_on_save = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Vim Appearance
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" syntax highlighting
syntax on

" show tab characters (useful for snippets)
set list listchars=tab:..

" only show the tabline if at least two tabs are open
set showtabline=1

" show the ruler and make sure we show hybrid relative line numbers on the side
" of all buffer windows (including windows to non-file buffers)
set ruler
augroup AutoWindowNumber
    autocmd!
    autocmd BufWinEnter * setlocal number relativenumber
augroup END

" make sure we see numbers in netrw
let g:netrw_bufsettings = 'nomodifiable nomodified number relativenumber
            \ nobuflisted readonly'

" highlight the line that the cursor is on for active windows only
augroup ActiveWindowCursorLine
    autocmd!
    autocmd VimEnter,WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" configure 80 and 120 column indicator only in insert mode
augroup ColorColumnInsertMode
    autocmd!
    autocmd InsertEnter * setlocal colorcolumn=81,121
    autocmd InsertLeave * setlocal colorcolumn=
augroup END

" configure colour scheme
set background=dark
let g:gruvbox_contrast_dark = 'hard'
" change background colours instead of underlines etc. in terminals as they're
" probably not supported
if !has('gui_running')
    let g:gruvbox_guisp_fallback = 'bg'
endif
colorscheme gruvbox

" ale gutter error/warning symbols and message configuration
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'E>'
let g:ale_sign_warning = 'W>'
let g:ale_echo_msg_error_str = 'error'
let g:ale_echo_msg_warning_str = 'warning'
let g:ale_echo_msg_info_str = 'info'
let g:ale_echo_msg_format = '[%severity%] %s [%linter%]'

" lightline-ale symbols
let g:lightline#ale#indicator_errors = 'E:'
let g:lightline#ale#indicator_warnings = 'W:'
let g:lightline#ale#indicator_checking = 'Linting...'
let g:lightline#ale#indicator_ok = 'Lint OK'

" configure lightline
let g:lightline = {
            \ 'colorscheme': 'gruvbox',
            \ 'component_expand': {
            \   'linter_checking': 'lightline#ale#checking',
            \   'linter_errors': 'lightline#ale#errors',
            \   'linter_warnings': 'lightline#ale#warnings',
            \   'linter_ok': 'lightline#ale#ok'
            \ },
            \ 'component_type': {
            \   'linter_checking': 'left',
            \   'linter_errors': 'error',
            \   'linter_warnings': 'warning',
            \   'linter_ok': 'left'
            \ },
            \ 'component_function': { 'gitbranch': 'fugitive#head' },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'filename', 'readonly', 'modified', 'gitbranch' ] ],
            \   'right': [ [ 'linter_checking', 'linter_warnings',
            \                'linter_errors', 'linter_ok' ],
            \              [ 'spell' ],
            \              [ 'percent', 'lineinfo' ],
            \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'inactive': {
            \   'left': [ [ 'filename', 'readonly', 'modified' ] ],
            \   'right': [ [ 'spell' ],
            \              [ 'percent', 'lineinfo' ],
            \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
            \ },
            \ 'tabline': { 'left': [ [ 'tabs' ] ], 'right': [ [ '' ] ] }
            \ }

" function to refresh lightline
function! g:LightlineRefresh()
    if !exists('g:loaded_lightline')
        return
    endif
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Vim Keymappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" general rebinds
" make sure ^S flow ctrl is disabled for the terminal - press ^Q to unfreeze
nnoremap <leader><esc> :Startify<cr>
nnoremap <c-s> :write<cr>
inoremap <c-s> <c-\><c-o>:write<cr>
nnoremap <silent> <leader>L :setlocal relativenumber!<cr>
nnoremap <silent> <f7> :setlocal spell!<cr>
inoremap <silent> <f7> <c-\><c-o>:setlocal spell!<cr>
nnoremap <leader>/ :set hlsearch!<cr>

" configure mucomplete keybinds
inoremap <silent> <plug>(MUcompleteFwdKey) <c-b>
imap <c-b> <plug>(MUcompleteCycFwd)
" TODO can't find a good mapping for this, but it's not too necessary:
"inoremap <silent> <plug>(MUcompleteBwdKey) <c-n>
"imap <c-n> <plug>(MUcompleteCycBwd)

" configure ultisnips keybinds
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsListSnippets = '<c-k>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

" netrw (dir explorer) keybinds
nnoremap <leader>dd :Explore<cr>
nnoremap <leader>de :Explore<space>
nnoremap <leader>ds :Sexplore<space>
nnoremap <leader>dv :Vexplore<space>

" buffer keybinds
nnoremap <leader>bb :buffers<cr>:buffer<space>
nnoremap <leader>bs :buffers<cr>:sbuffer<space>
nnoremap <leader>bv :buffers<cr>:vertical sbuffer<space>
nnoremap <leader>bd :buffers<cr>:bdelete<space>
nnoremap <leader>bt :buffers<cr>:tab sbuffer<space>
nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bN :bprevious<cr>

" loclist window keybinds
nnoremap <leader>ll :lopen<cr>
nnoremap <leader>ln :lnext<cr>
nnoremap <leader>lN :lprevious<cr>

" quickfix window keybinds
nnoremap <leader>qq :copen<cr>
nnoremap <leader>qn :cnext<cr>
nnoremap <leader>qN :cprevious<cr>

" configure startify session keybinds
nnoremap <leader>ss :SSave<cr>
nnoremap <leader>sl :SLoad<cr>
nnoremap <leader>sd :SDelete<cr>
nnoremap <leader>sc :SClose<cr>

" configure vim-fswitch keybinds
nnoremap <leader>oo :FSHere<cr>
nnoremap <leader>oh :FSLeft<cr>
nnoremap <leader>ol :FSRight<cr>
nnoremap <leader>ok :FSAbove<cr>
nnoremap <leader>oj :FSBelow<cr>
nnoremap <leader>oH :FSSplitLeft<cr>
nnoremap <leader>oL :FSSplitRight<cr>
nnoremap <leader>oK :FSSplitAbove<cr>
nnoremap <leader>oJ :FSSplitBelow<cr>

" configure vim-fugitive keybinds
nnoremap <leader>gg :Gstatus<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <silent> <leader>gl :Glog<cr>:copen<cr>
nnoremap <silent> <leader>gL :0Glog<cr>:copen<cr>
nnoremap <leader>ge :Gedit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gC :Gcommit -a<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gps :Gpush<cr>
nnoremap <leader>gpl :Gpull<cr>

" configure ale keybinds (most of these binds only work for lsp servers)
imap <c-tab> <plug>(ale_complete)
nnoremap <leader>al :ALELint<cr>
nnoremap <leader>af :ALEFix<cr>
nnoremap <leader>ah :ALEHover<cr>
nnoremap <leader>ai :ALEHover<cr>
nnoremap <leader>as :ALESymbolSearch<space>
nnoremap <leader>ar :ALEFindReferences<cr>
nnoremap <leader>ad :ALEGoToDefinition<cr>
nnoremap <leader>aD :ALEGoToDefinitionInSplit<cr>
nnoremap <leader>at :ALEGoToTypeDefinition<cr>
nnoremap <leader>aT :ALEGoToTypeDefinitionInSplit<cr>
