# Sean Dewar's C++ Snippets (extends C with higher priority)
# Mostly based on the ISO C++ Core Guidelines using the Stroustrup naming style
extends c
priority 2

snippet #in "#include global file"
#include <${1:file.hpp}>
endsnippet

snippet #lin "#include local file"
#include "${1:`!p snip.rv = snip.basename + '.hpp'`}"
endsnippet

snippet forea "range-based for (each) loop"
for (${2:const auto&} ${3:x} : ${1:container}) {
	${0:${VISUAL}}
}
endsnippet

snippet forit "iterator-based for loop"
for (auto ${3:it} = ${1:container}.${2:c}begin(); $3 != $1.$2end(); ++$3) {
	${0:${VISUAL}}
}
endsnippet

snippet ns "namespace"
namespace ${1:My_namespace} {

${0:${VISUAL}}

} // namespace $1
endsnippet

snippet cl "class (rule of zero)"
class ${1:My_class} ${2}{
public:
	$1();

private:
	${0:${VISUAL}}
};
endsnippet

snippet cl5 "class (rule of five)"
class ${1:My_class} ${2}{
public:
	$1();
	$1(const $1&);
	$1($1&&);
	${3}~$1() noexcept;

	$1& operator=(const $1&);
	$1& operator=($1&&);

private:
	${0:${VISUAL}}
};
endsnippet

snippet st "struct"
struct ${1:My_struct} ${2}{
	${0:${VISUAL}}
};
endsnippet

snippet fn "function definition"
${1:void} ${2:my_function}(${4})${3}
{
	${0:${VISUAL}}
}
endsnippet

snippet fnp "function declaration (prototype)"
${1:void} ${2:my_function}(${4})${3};
endsnippet

snippet us "using type alias"
using ${1:My_type} = ${2:${VISUAL:T}};
endsnippet

snippet tp "template"
template<${1:typename} ${2:T}${3}>
endsnippet

snippet encl "enum class"
enum class ${1:My_enum_class} {
	${0:${VISUAL}}
};
endsnippet
