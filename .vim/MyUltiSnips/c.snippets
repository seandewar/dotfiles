# Sean Dewar's C snippets
# Mostly based on the ISO C++ Core Guidelines using the Stroustrup naming style
# with some C-specific changes
priority 1

snippet //c "Sean Dewar's copyright header comment"
// Copyright (C) Sean Dewar <https://github.com/seandewar>.
// This file is distributed under the license terms in the LICENSE.txt file
// located within the root directory of this distribution.


endsnippet

snippet //todo "TODO comment"
// TODO: ${0:${VISUAL:implement this}}
endsnippet

snippet #once "#include guard"
#ifndef ${1:PROJECT}_${2:FILE}_H
#define $1_$2_H

${0:${VISUAL}}

#endif // $1_$2_H
endsnippet

snippet #in "#include global file"
#include <${1:file.h}>
endsnippet

snippet #lin "#include local file"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet #if "#if block"
#if ${1:MACRO_CONDITION}
	${0:${VISUAL}}
#endif
endsnippet

snippet #ifd "#ifdef block"
#ifdef ${1:MACRO_IDENTIFIER}
	${0:${VISUAL}}
#endif
endsnippet

snippet #ifnd "#ifndef block"
#ifndef ${1:MACRO_IDENTIFIER}
	${0:${VISUAL}}
#endif
endsnippet

snippet bl "block"
{
	${0:${VISUAL}}
}
endsnippet

snippet if "if block"
if (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else block"
else {
	${0:${VISUAL}}
}
endsnippet

snippet elif "else if block"
else if (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for (${1:init}; ${2:condition}; ${3:step}) {
	${0:${VISUAL}}
}
endsnippet

snippet fori "index-based for loop"
for (${3:int} ${4:i} = ${2:0}; $4 < ${1:count}; ++$4) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "while loop"
while (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do while loop"
do {
	${0:${VISUAL}}
} while (${1:condition});
endsnippet

snippet sw "switch"
switch (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet

# TODO unindent case to match switch's indent
snippet ca "switch case"
case ${1:expression}:
	${0:${VISUAL}}
	break;
endsnippet

snippet de "switch default case"
default:
	${0:${VISUAL}}
	break;
endsnippet

snippet fn "function definition"
${1:void} ${2:my_function}(${3:void})
{
	${0:${VISUAL}}
}
endsnippet

snippet fnp "function declaration (prototype)"
${1:void} ${2:my_function}(${3:void});
endsnippet

snippet main "main() entry point function"
int main(int argc, char* argv[])
{
	${0:${VISUAL}}
	return 0;
}
endsnippet

snippet td "typedef"
typedef ${2:${VISUAL:T}} ${1:My_type};
endsnippet

snippet st "struct"
struct ${1:My_struct} {
	${0:${VISUAL}}
};
endsnippet

snippet tdst "struct typedef"
typedef struct {
	${0:${VISUAL}}
} ${1:My_struct_type};
endsnippet

snippet un "union"
union ${1:My_union} {
	${0:${VISUAL}}
};
endsnippet

snippet tdun "union typedef"
typedef union {
	${0:${VISUAL}}
} ${1:My_union_type};
endsnippet

snippet en "enum"
enum ${1:My_enum} {
	${0:${VISUAL}}
};
endsnippet

snippet tden "enum typedef"
typedef enum {
	${0:${VISUAL}}
} ${1:My_enum_type};
endsnippet
